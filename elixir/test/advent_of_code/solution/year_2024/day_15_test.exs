defmodule AdventOfCode.Solution.Year2024.Day15Test do
  use ExUnit.Case, async: true

  import AdventOfCode.Solution.Year2024.Day15

  setup do
    [
      small_input: """
      ########
      #..O.O.#
      ##@.O..#
      #...O..#
      #.#.O..#
      #...O..#
      #......#
      ########

      <^^>>>vv<v>>v<<
      """,
      large_input: """
      ##########
      #..O..O.O#
      #......O.#
      #.OO..O.O#
      #..O@..O.#
      #O#..O...#
      #O..O..O.#
      #.OO.O.OO#
      #....O...#
      ##########

      <vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^
      vvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v
      ><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<
      <<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^
      ^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><
      ^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^
      >^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^
      <><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>
      ^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>
      v^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^
      """
    ]
  end

  test "parse", %{small_input: input} do
    result = parse(input)

    assert result ==
             {{%{
                 {4, 5} => "O",
                 {1, 2} => "#",
                 {5, 2} => ".",
                 {3, 6} => ".",
                 {2, 4} => "#",
                 {6, 5} => ".",
                 {0, 3} => "#",
                 {1, 1} => ".",
                 {4, 3} => "O",
                 {3, 7} => "#",
                 {5, 0} => "#",
                 {0, 5} => "#",
                 {0, 1} => "#",
                 {4, 0} => "#",
                 {3, 2} => ".",
                 {7, 3} => "#",
                 {3, 1} => "O",
                 {6, 1} => ".",
                 {2, 0} => "#",
                 {2, 7} => "#",
                 {4, 6} => ".",
                 {6, 2} => ".",
                 {0, 7} => "#",
                 {7, 2} => "#",
                 {0, 0} => "#",
                 {7, 6} => "#",
                 {1, 4} => ".",
                 {5, 6} => ".",
                 {6, 6} => ".",
                 {0, 4} => "#",
                 {1, 7} => "#",
                 {4, 2} => "O",
                 {2, 3} => ".",
                 {3, 4} => ".",
                 {7, 5} => "#",
                 {2, 1} => ".",
                 {7, 0} => "#",
                 {4, 7} => "#",
                 {3, 3} => ".",
                 {3, 0} => "#",
                 {7, 7} => "#",
                 {6, 0} => "#",
                 {7, 1} => "#",
                 {5, 3} => ".",
                 {1, 6} => ".",
                 {4, 1} => ".",
                 {0, 2} => "#",
                 {0, 6} => "#",
                 {1, 0} => "#",
                 {1, 3} => ".",
                 {1, 5} => ".",
                 {2, 2} => "@",
                 {2, 5} => ".",
                 {2, 6} => ".",
                 {3, 5} => ".",
                 {4, 4} => "O",
                 {5, 1} => "O",
                 {5, 4} => ".",
                 {5, 5} => ".",
                 {5, 7} => "#",
                 {6, 3} => ".",
                 {6, 4} => ".",
                 {6, 7} => "#",
                 {7, 4} => "#"
               }, 8, 8},
              ["<", "^", "^", ">", ">", ">", "v", "v", "<", "v", ">", ">", "v", "<", "<"]}
  end

  test "part1 small", %{small_input: input} do
    result = input |> parse() |> part1()

    assert result == 2028
  end

  test "part1 large", %{large_input: input} do
    result = input |> parse() |> part1()

    assert result == 10092
  end

  @tag :skip
  test "part2", %{input: input} do
    result = input |> parse() |> part2()

    assert result
  end
end
